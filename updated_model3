import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from ta.momentum import RSIIndicator
from ta.trend import MACD
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from xgboost import XGBClassifier
from sklearn.impute import SimpleImputer

# Load BTC data
btc_file_path = r'C:\Users\rahul\Downloads\BTC-USD.csv'
btc_data = pd.read_csv(btc_file_path)
btc_data['Date'] = pd.to_datetime(btc_data['Date'])
btc_data.set_index('Date', inplace=True)

# Load S&P 500 historical data
sp500_file_path = r'C:\Users\rahul\OneDrive\Desktop\iit kgp hackathon\sp500_historical_data.csv'
sp500_data = pd.read_csv(sp500_file_path)
sp500_data['Date'] = pd.to_datetime(sp500_data['Date'])
sp500_data.set_index('Date', inplace=True)

# Calculate S&P 500 returns
sp500_data['sp500_returns_percentage'] = sp500_data['Adj Close'].pct_change() * 100

# Calculate cumulative S&P 500 returns
sp500_data['cumulative_sp500_returns'] = (1 + sp500_data['sp500_returns_percentage'] / 100).cumprod() - 1

# Calculate performance metrics for S&P 500
sp500_sharpe_ratio = (sp500_data['sp500_returns_percentage'].mean() / sp500_data['sp500_returns_percentage'].std()) * np.sqrt(252)
sp500_sortino_ratio = (sp500_data['sp500_returns_percentage'].mean() / sp500_data[sp500_data['sp500_returns_percentage'] < 0]['sp500_returns_percentage'].std()) * np.sqrt(252)
sp500_max_drawdown = -(sp500_data['cumulative_sp500_returns'] / sp500_data['cumulative_sp500_returns'].cummax() - 1).min()

# Print performance metrics for S&P 500
print("\nPerformance Metrics for S&P 500:")
print("Sharpe Ratio (S&P 500):", sp500_sharpe_ratio)
print("Sortino Ratio (S&P 500):", sp500_sortino_ratio)
print("Max Drawdown (S&P 500):", sp500_max_drawdown)

# Print Percentage Returns for S&P 500
sp500_percentage_return = sp500_data['Adj Close'].iloc[-1] / sp500_data['Adj Close'].iloc[0] - 1
print("\nPercentage Returns for S&P 500:")
print("S&P 500 Percentage Return:", sp500_percentage_return)

# Calculate additional indicators
btc_data['sma_short'] = btc_data['Close'].rolling(window=20).mean()
btc_data['sma_long'] = btc_data['Close'].rolling(window=50).mean()

# Generate signals based on moving average crossover
btc_data['buy_signal'] = np.where(btc_data['sma_short'] > btc_data['sma_long'], 1, 0)
btc_data['sell_signal'] = np.where(btc_data['sma_short'] < btc_data['sma_long'], -1, 0)
btc_data['position'] = btc_data['buy_signal'] + btc_data['sell_signal']

# Prepare features and target for machine learning model
features = btc_data[['sma_short', 'sma_long']]
target = btc_data['position']

# Convert target to [0, 1, 2]
target_classes = [-1, 0, 1]
btc_data['position'] = btc_data['position'].apply(lambda x: target_classes.index(x))

# Prepare features and target for machine learning model
features = btc_data[['sma_short', 'sma_long']]
target = btc_data['position']

# Impute NaN values in features
imputer = SimpleImputer(strategy='mean')
features_imputed = pd.DataFrame(imputer.fit_transform(features), columns=features.columns)

# Split data for machine learning model
X_train, X_test, y_train, y_test = train_test_split(features_imputed, target, test_size=0.2, random_state=42)

# Tune XGBoost hyperparameters
xgb_model = XGBClassifier(
    objective='multi:softmax',
    num_class=3,  # Number of classes
    n_estimators=1000,
    learning_rate=0.01,
    max_depth=5,
    subsample=0.8,
    colsample_bytree=0.8,
    gamma=1,
    random_state=42
)

xgb_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = xgb_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"XGBoost Model Accuracy: {accuracy}")

# Implement strategy based on XGBoost predictions
btc_data['xgb_signal'] = xgb_model.predict(features_imputed)

# Backtest the XGBoost strategy
btc_data['returns'] = btc_data['Close'].pct_change()
btc_data['xgb_strategy_returns'] = btc_data['xgb_signal'].shift(1) * btc_data['returns']
btc_data['cumulative_xgb_strategy_returns'] = (1 + btc_data['xgb_strategy_returns']).cumprod()

# Calculate performance metrics for XGBoost
xgb_sharpe_ratio = (btc_data['xgb_strategy_returns'].mean() / btc_data['xgb_strategy_returns'].std()) * np.sqrt(252)
xgb_sortino_ratio = (btc_data['xgb_strategy_returns'].mean() / btc_data[btc_data['xgb_strategy_returns'] < 0]['xgb_strategy_returns'].std()) * np.sqrt(252)
xgb_max_drawdown = -(btc_data['cumulative_xgb_strategy_returns'] / btc_data['cumulative_xgb_strategy_returns'].cummax() - 1).min()

# Print performance metrics for XGBoost
print("\nPerformance Metrics for XGBoost:")
print("Sharpe Ratio (XGBoost):", xgb_sharpe_ratio)
print("Sortino Ratio (XGBoost):", xgb_sortino_ratio)
print("Max Drawdown (XGBoost):", xgb_max_drawdown)

# Print Percentage Returns for BTC and the XGBoost Strategy
btc_percentage_return = btc_data['Close'].iloc[-1] / btc_data['Close'].iloc[0] - 1
xgb_strategy_percentage_return = btc_data['cumulative_xgb_strategy_returns'].iloc[-1] - 1

print("\nPercentage Returns for BTC and the XGBoost Strategy:")
print("BTC Percentage Return:", btc_percentage_return)
print("XGBoost Strategy Percentage Return:", xgb_strategy_percentage_return)

# Plot Results for BTC
fig1, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 12), sharex=True)

# Plot BTC Close Price and SMAs
ax1.plot(btc_data.index, btc_data['Close'], label='BTC Close Price', color='blue')
ax1.plot(btc_data.index, btc_data['sma_short'], label='Short SMA', color='orange', linestyle='--')
ax1.plot(btc_data.index, btc_data['sma_long'], label='Long SMA', color='green', linestyle='--')
ax1.set_ylabel('Price')
ax1.legend()

# Plot Cumulative XGBoost Strategy Returns
ax2.plot(btc_data.index, btc_data['cumulative_xgb_strategy_returns'], label='Cumulative XGBoost Strategy Returns', color='purple')
ax2.set_ylabel('Cumulative Returns')
ax2.legend()

# Plot Percentage Returns for XGBoost Strategy (Now in yellow)
ax3.plot(btc_data.index, btc_data['xgb_strategy_returns'] * 100, label='XGBoost Strategy Returns Percentage', color='yellow')
ax3.set_xlabel('Date')
ax3.set_ylabel('Percentage Returns')
ax3.legend()

plt.show()

# Plot Results for S&P 500
fig2, (ax4, ax5) = plt.subplots(2, 1, figsize=(12, 8), sharex=True)

# Plot Cumulative Returns for S&P 500
ax4.plot(sp500_data.index, sp500_data['cumulative_sp500_returns'], label='Cumulative S&P 500 Returns', color='blue')
ax4.set_ylabel('Cumulative Returns')
ax4.legend()

# Plot Percentage Returns for S&P 500
ax5.plot(sp500_data.index, sp500_data['sp500_returns_percentage'], label='S&P 500 Returns Percentage', color='green')
ax5.set_xlabel('Date')
ax5.set_ylabel('Percentage Returns')
ax5.legend()

plt.show()
