import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_ta
from arch import arch_model
import matplotlib.ticker as mtick
import warnings

# Suppress warnings
warnings.filterwarnings('ignore')

# Load daily data
daily_df = pd.read_csv('BTC-USD.csv')
daily_df['Date'] = pd.to_datetime(daily_df['Date'])
daily_df = daily_df.set_index('Date')
daily_df['log_ret'] = np.log(daily_df['Adj Close']).diff()
daily_df['variance'] = daily_df['log_ret'].rolling(180).var()
daily_df = daily_df['2018':'2022-01-31'].dropna()

# Load intraday 5-minute data
intraday_5mindf = pd.read_csv('BTC-USDT-5min.csv')
intraday_5mindf.rename(columns={'date': 'datetime'}, inplace=True)
intraday_5mindf['datetime'] = pd.to_datetime(intraday_5mindf['datetime'], format='mixed')
intraday_5mindf.set_index('datetime', inplace=True)

# Resample intraday data to 5-minute intervals
intraday_5min_df = intraday_5mindf.resample('5T').agg({
    'open': 'first',
    'high': 'max',
    'low': 'min',
    'close': 'last',
    'volume': 'sum'
}).reset_index()

intraday_5min_df['datetime'] = pd.to_datetime(intraday_5min_df['datetime'])
intraday_5min_df = intraday_5min_df.set_index('datetime')
intraday_5min_df['date'] = pd.to_datetime(intraday_5min_df.index.date)
intraday_5min_df = intraday_5min_df['2018':'2022-01-31']

# Check for NaN values in daily returns
check_nan = daily_df['log_ret'].isnull().values.any()
print(check_nan)

# Function to predict volatility using ARCH model
def predict_volatility(x):
    model = arch_model(x, vol='garch', p=1, q=3)
    fitted_model = model.fit(disp='off')
    variance_forecast = fitted_model.forecast(horizon=1).variance.iloc[-1, 0]
    return variance_forecast

# Apply the predict_volatility function to each rolling window
window_size = 90
predictions = daily_df['log_ret'].rolling(window=window_size).apply(predict_volatility)

# Append predictions to the DataFrame
daily_df['predictions'] = predictions
daily_df['prediction_premium'] = (daily_df['predictions'] - daily_df['variance']) / daily_df['variance']
daily_df['premium_std'] = daily_df['prediction_premium'].rolling(180).std()
daily_df['signal_daily'] = daily_df.apply(
    lambda x: 1 if x['prediction_premium'] > x['premium_std'] else (-1 if x['prediction_premium'] < -x['premium_std'] else np.nan),
    axis=1)
daily_df['signal_daily'] = daily_df['signal_daily'].shift()

# Merge daily and intraday dataframes
final_df = intraday_5min_df.reset_index() \
    .merge(daily_df[['signal_daily']].reset_index(), left_on='date', right_on='Date') \
    .drop(['date', 'Date'], axis=1) \
    .set_index('datetime')

# Technical indicators
final_df['rsi'] = pandas_ta.rsi(close=final_df['close'], length=14)
final_df['lband'] = pandas_ta.bbands(close=final_df['close'], length=20).iloc[:, 0]
final_df['uband'] = pandas_ta.bbands(close=final_df['close'], length=20).iloc[:, 2]

# MACD indicators
short_window = 12
long_window = 26
signal_period = 9
final_df['EMA_short'] = final_df['close'].ewm(span=short_window, min_periods=1, adjust=False).mean()
final_df['EMA_long'] = final_df['close'].ewm(span=long_window, min_periods=1, adjust=False).mean()
final_df['MACD_line'] = final_df['EMA_short'] - final_df['EMA_long']
final_df['signal_line'] = final_df['MACD_line'].ewm(span=signal_period, min_periods=1, adjust=False).mean()
final_df['MACD_histogram'] = final_df['MACD_line'] - final_df['signal_line']
final_df.drop(['EMA_short', 'EMA_long'], axis=1, inplace=True)

# Intraday trading signals
final_df['signal_intraday'] = final_df.apply(
    lambda x: -1 if (x['MACD_line'] < x['signal_line']) & (x['MACD_line'] > 0) & (x['signal_line'] > 0)
    else (1 if (x['MACD_line'] > x['signal_line']) & (x['MACD_line'] < 0) & (x['signal_line'] < 0) else np.nan),
    axis=1)

final_df['return'] = np.log(final_df['close']).diff()

# Combine intraday and daily signals
final_df['return_sign'] = final_df.apply(
    lambda x: 1 if (x['signal_intraday'] == -1) else (-1 if (x['signal_intraday'] == 1) else np.nan),
    axis=1)
final_df['return_sign'] = final_df.groupby(pd.Grouper(freq='D'))['return_sign'].transform(lambda x: x.ffill())

final_df['forward_return'] = final_df['return'].shift(-1)
final_df['strategy_return'] = final_df['forward_return'] * final_df['return_sign']

# Calculate daily returns and cumulative returns
daily_return_df = final_df.groupby(pd.Grouper(freq='D'))['strategy_return'].sum()
strategy_cumulative_return = np.exp(np.log1p(daily_return_df).cumsum()).sub(1)

# Plot cumulative returns
plt.figure(figsize=(20, 8))
strategy_cumulative_return.plot()
plt.title('Intraday Strategy Returns')
plt.gca().yaxis.set_major_formatter(mtick.PercentFormatter(1))
plt.ylabel('Return')
plt.xticks(daily_return_df.index)
plt.show()
